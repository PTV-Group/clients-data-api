/*
 * Data
 *
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.data.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.data.Model
{
    /// <summary>
    /// The toll features contained by this geographical unit. 
    /// </summary>
    [DataContract(Name = "TollFeatures")]
    public partial class TollFeatures : IEquatable<TollFeatures>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TollFeatures" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TollFeatures() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TollFeatures" /> class.
        /// </summary>
        /// <param name="tollSystems">The list of toll systems contained by this geographical unit. (required).</param>
        public TollFeatures(List<TollSystem> tollSystems = default(List<TollSystem>))
        {
            // to ensure "tollSystems" is required (not null)
            if (tollSystems == null)
            {
                throw new ArgumentNullException("tollSystems is a required property for TollFeatures and cannot be null");
            }
            this.TollSystems = tollSystems;
        }

        /// <summary>
        /// The list of toll systems contained by this geographical unit.
        /// </summary>
        /// <value>The list of toll systems contained by this geographical unit.</value>
        [DataMember(Name = "tollSystems", IsRequired = true, EmitDefaultValue = true)]
        public List<TollSystem> TollSystems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TollFeatures {\n");
            sb.Append("  TollSystems: ").Append(TollSystems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TollFeatures);
        }

        /// <summary>
        /// Returns true if TollFeatures instances are equal
        /// </summary>
        /// <param name="input">Instance of TollFeatures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TollFeatures input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TollSystems == input.TollSystems ||
                    this.TollSystems != null &&
                    input.TollSystems != null &&
                    this.TollSystems.SequenceEqual(input.TollSystems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TollSystems != null)
                {
                    hashCode = (hashCode * 59) + this.TollSystems.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
