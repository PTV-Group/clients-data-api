/*
 * Data
 *
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.6
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.data.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.data.Model
{
    /// <summary>
    /// The features supported by this geographical unit. 
    /// </summary>
    [DataContract(Name = "MapFeatures")]
    public partial class MapFeatures : IEquatable<MapFeatures>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MapFeatures" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MapFeatures() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MapFeatures" /> class.
        /// </summary>
        /// <param name="toll">If true, toll is supported in this geographical unit. False means that no toll data is available or toll does not apply in this geographical unit. Vignettes are not considered. (required).</param>
        public MapFeatures(bool toll = default(bool))
        {
            this.Toll = toll;
        }

        /// <summary>
        /// If true, toll is supported in this geographical unit. False means that no toll data is available or toll does not apply in this geographical unit. Vignettes are not considered.
        /// </summary>
        /// <value>If true, toll is supported in this geographical unit. False means that no toll data is available or toll does not apply in this geographical unit. Vignettes are not considered.</value>
        [DataMember(Name = "toll", IsRequired = true, EmitDefaultValue = true)]
        public bool Toll { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MapFeatures {\n");
            sb.Append("  Toll: ").Append(Toll).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MapFeatures);
        }

        /// <summary>
        /// Returns true if MapFeatures instances are equal
        /// </summary>
        /// <param name="input">Instance of MapFeatures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MapFeatures input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Toll == input.Toll ||
                    this.Toll.Equals(input.Toll)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Toll.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
