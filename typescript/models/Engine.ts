/* tslint:disable */
/* eslint-disable */
/**
 * Data
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EmissionStandard } from './EmissionStandard';
import {
    EmissionStandardFromJSON,
    EmissionStandardFromJSONTyped,
    EmissionStandardToJSON,
} from './EmissionStandard';
import type { EngineType } from './EngineType';
import {
    EngineTypeFromJSON,
    EngineTypeFromJSONTyped,
    EngineTypeToJSON,
} from './EngineType';

/**
 * Physical and legal properties of the engine of a vehicle. It is null for an unpowered vehicle.
 * @export
 * @interface Engine
 */
export interface Engine {
    /**
     * 
     * @type {EngineType}
     * @memberof Engine
     */
    engineType: EngineType;
    /**
     * Maximum travel speed [km/h].
     * 
     * Relevant for `range calculation`.
     * 
     * @type {number}
     * @memberof Engine
     */
    maximumSpeed: number;
    /**
     * Recommended, reduced speed to ensure high efficiency [km/h].
     * 
     * Relevant for `range calculation`.
     * 
     * @type {number}
     * @memberof Engine
     */
    ecoSpeed: number;
    /**
     * 
     * @type {EmissionStandard}
     * @memberof Engine
     */
    emissionStandard: EmissionStandard;
    /**
     * The maximum available power of the vehicle [kW].
     * @type {number}
     * @memberof Engine
     */
    power?: number;
    /**
     * The manufacturer given official range of the vehicle with this drive train [km].
     * @type {number}
     * @memberof Engine
     */
    officialRange?: number;
}

/**
 * Check if a given object implements the Engine interface.
 */
export function instanceOfEngine(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "engineType" in value;
    isInstance = isInstance && "maximumSpeed" in value;
    isInstance = isInstance && "ecoSpeed" in value;
    isInstance = isInstance && "emissionStandard" in value;

    return isInstance;
}

export function EngineFromJSON(json: any): Engine {
    return EngineFromJSONTyped(json, false);
}

export function EngineFromJSONTyped(json: any, ignoreDiscriminator: boolean): Engine {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'engineType': EngineTypeFromJSON(json['engineType']),
        'maximumSpeed': json['maximumSpeed'],
        'ecoSpeed': json['ecoSpeed'],
        'emissionStandard': EmissionStandardFromJSON(json['emissionStandard']),
        'power': !exists(json, 'power') ? undefined : json['power'],
        'officialRange': !exists(json, 'officialRange') ? undefined : json['officialRange'],
    };
}

export function EngineToJSON(value?: Engine | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'engineType': EngineTypeToJSON(value.engineType),
        'maximumSpeed': value.maximumSpeed,
        'ecoSpeed': value.ecoSpeed,
        'emissionStandard': EmissionStandardToJSON(value.emissionStandard),
        'power': value.power,
        'officialRange': value.officialRange,
    };
}

