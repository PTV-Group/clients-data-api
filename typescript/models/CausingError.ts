/* tslint:disable */
/* eslint-disable */
/**
 * Data
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CausingError
 */
export interface CausingError {
    /**
     * A human readable message that describes the error.
     * @type {string}
     * @memberof CausingError
     */
    description: string;
    /**
     * A constant string that can be used to identify this error class programmatically.
     * An errorCode can have **details** to provide information in additional properties which are described with the code they apply to. They are of type string unless otherwise specified.
     * Note that additional errorCodes as well as the **details** of existing errorCodes may be added at any time. Furthermore, the **description** may change at any time.
     * 
     * **Error codes for** `GENERAL_VALIDATION_ERROR`
     * 
     * * `GENERAL_INVALID_VALUE` - A parameter is set to an invalid value.
     *   * `value` - The invalid value.
     * * `GENERAL_UNRECOGNIZED_PARAMETER` - A parameter is unknown.
     * * `GENERAL_MISSING_PARAMETER` - A required parameter is missing.
     * * `GENERAL_MINIMUM_LENGTH_VIOLATED` - The minimum length is violated.
     *   * `minimumLength` - The minimum length (integer).
     * * `GENERAL_MAXIMUM_LENGTH_VIOLATED` - The maximum length is violated.
     *   * `maximumLength` - The maximum length (integer).
     * * `GENERAL_MINIMUM_VALUE_VIOLATED` - The minimum value restriction is violated.
     *   * `minimumValue` - The minimum value (integer or double).
     * * `GENERAL_MAXIMUM_VALUE_VIOLATED` - The maximum value restriction is violated.
     *   * `maximumValue` - The maximum value (integer or double).
     * * `GENERAL_DUPLICATE_PARAMETER` - A parameter is duplicated.
     * * `GENERAL_INVALID_LIST` - A list has an invalid format such as duplicate commas.
     *   * `value` - The invalid list.
     * * `GENERAL_INVALID_INTERVAL` - A time interval is invalid, i.e. start is greater than end.
     * * `ROADATTRIBUTES_INVALID_NUMBER_OF_COORDINATES` - The points cannot be parsed because the number of coordinates is not even.
     *   * `value` - The invalid parameter value.
     * * `ROADATTRIBUTES_INVALID_COORDINATE` - The provided coordinate is not in the valid range or cannot be parsed.
     *   * `value` - The invalid parameter value.
     *   * `coordinateIndex` - The index denoting the erroneous coordinate within the polyline (integer).
     * * `ROADATTRIBUTES_WEEKLY_SCHEDULE_EXCEEDS_ONE_WEEK` - The weekly schedule exceeds one week (168 hours).
     * * `ROADATTRIBUTES_SCENARIOS_NOT_FOUND` - At least one of the requested scenarios could not be found.
     *   * `scenarios` - The scenarios which could not be found (comma-separated list).
     * * `ROADATTRIBUTES_NO_ACTIVE_SCENARIO` - No active scenario was given.
     * * `ROADATTRIBUTES_INVALID_POLYGON` - The polygon is invalid. Please make sure it does not contain spikes and is not self-intersecting. Polygons must be valid according to OGC.
     *   * `value` - The invalid parameter value.
     * * `DATA_PARAMETER_CONFLICT` - Two parameters are in conflict with each other.
     *   * `conflictingParameter` - The conflicting parameter.
     *   * `message` - The error message.
     * 
     * **Error codes for** `ROADATTRIBUTES_RESTRICTION_EXCEEDED`
     * 
     * * `ROADATTRIBUTES_TOO_MANY_SCENARIOS` - Too many custom road attributes scenarios have been created. - _The **parameter** remains empty._
     *   * `limit` - The maximum allowed number of custom road attribute scenarios (integer).
     * * `ROADATTRIBUTES_TOO_MANY_ROADS_SELECTED` - Too many roads are contained in the selection.
     *   * `limit` - The maximum allowed number of selected roads (integer).
     * * `ROADATTRIBUTES_TOO_MANY_ROADS_IN_SCENARIO` - Too many roads are contained in the scenario.
     *   * `limit` - The maximum allowed number of selected roads (integer) in the scenario.
     * 
     * **Error codes for** `DATA_RESTRICTION_EXCEEDED`
     * 
     * * `DATA_TOO_MANY_COMBINED_TRANSPORTS_SELECTED` - The combination of the point and radius led to too many combined transports.
     *   * `limit` - The maximum allowed number of selected combined transports (integer).
     * 
     * **Error codes for** `GENERAL_RESOURCE_NOT_FOUND`
     * 
     * * `GENERAL_INVALID_ID` - The ID does not exist.
     *   * `value` - The invalid ID.
     * 
     * **Error codes for** `ROADATTRIBUTES_ERROR`
     * 
     * * `ROADATTRIBUTES_NO_ROAD_FOUND` - With the given points no road can be found.
     *   * `value` - The invalid parameter value.
     *   * `hint` - A hint how to solve the problem.
     * * `ROADATTRIBUTES_DIRECTION_CANNOT_BE_APPLIED` - The direction cannot be applied to more than one road, use **direction** _BOTH_ instead.
     *   * `value` - The invalid direction.
     * * `ROADATTRIBUTES_UPDATE_NOT_MOST_RECENT_REVISION` - The scenario to be updated is not the most recent revision. Only the most recent revision can be updated.
     * * `ROADATTRIBUTES_NAME_ALREADY_EXISTS` - A custom road attribute scenario with the same name already exists.
     *   * `value` - The duplicate name.
     * @type {string}
     * @memberof CausingError
     */
    errorCode: string;
    /**
     * The name of the affected query or path parameter or a JSONPath to the affected property of the request.
     * @type {string}
     * @memberof CausingError
     */
    parameter?: string;
    /**
     * Additional properties specific to this error class.
     * @type {{ [key: string]: any; }}
     * @memberof CausingError
     */
    details?: { [key: string]: any; };
}

/**
 * Check if a given object implements the CausingError interface.
 */
export function instanceOfCausingError(value: object): value is CausingError {
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('errorCode' in value) || value['errorCode'] === undefined) return false;
    return true;
}

export function CausingErrorFromJSON(json: any): CausingError {
    return CausingErrorFromJSONTyped(json, false);
}

export function CausingErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): CausingError {
    if (json == null) {
        return json;
    }
    return {
        
        'description': json['description'],
        'errorCode': json['errorCode'],
        'parameter': json['parameter'] == null ? undefined : json['parameter'],
        'details': json['details'] == null ? undefined : json['details'],
    };
}

export function CausingErrorToJSON(value?: CausingError | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'description': value['description'],
        'errorCode': value['errorCode'],
        'parameter': value['parameter'],
        'details': value['details'],
    };
}

