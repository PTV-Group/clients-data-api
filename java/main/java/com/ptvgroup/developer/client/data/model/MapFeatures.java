/*
 * Data
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.data.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The features supported by this geographical unit. 
 */
@ApiModel(description = "The features supported by this geographical unit. ")
@JsonPropertyOrder({
  MapFeatures.JSON_PROPERTY_TOLL
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-30T06:51:07.244706Z[Etc/UTC]")
public class MapFeatures {
  public static final String JSON_PROPERTY_TOLL = "toll";
  private Boolean toll;

  public MapFeatures() { 
  }

  public MapFeatures toll(Boolean toll) {
    this.toll = toll;
    return this;
  }

   /**
   * If true, toll is supported in this geographical unit. False means that no toll data is available or toll does not apply in this geographical unit. Vignettes are not considered.
   * @return toll
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "If true, toll is supported in this geographical unit. False means that no toll data is available or toll does not apply in this geographical unit. Vignettes are not considered.")
  @JsonProperty(JSON_PROPERTY_TOLL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getToll() {
    return toll;
  }


  @JsonProperty(JSON_PROPERTY_TOLL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToll(Boolean toll) {
    this.toll = toll;
  }


  /**
   * Return true if this MapFeatures object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MapFeatures mapFeatures = (MapFeatures) o;
    return Objects.equals(this.toll, mapFeatures.toll);
  }

  @Override
  public int hashCode() {
    return Objects.hash(toll);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MapFeatures {\n");
    sb.append("    toll: ").append(toIndentedString(toll)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

